@page "/recipe/{id}"

@using Models
@using System
@using Microsoft.AspNetCore.Components
@using System.Linq
@inject Data.DataBase.DataContext _context
@inject Data.Services.ReceiptService _receiptService
@inject Data.Repositories.Interface.IAsyncRepository<Receipt> _receiptRepository
<style>
    h1 {text-align: center;}
    img {align-self: center;}
</style>

<h1>@receipt.Name</h1>
@if(!string.IsNullOrEmpty(receipt.ImageUrl))
{
    <div class="text-center">
        <img src=@receipt.ImageUrl alt="Italian Trulli" class="img-fluid">
    </div>
}
<br><br>
<ul class="list-group">
    <h4 class="list-group-item list-group-item-action active" >Descrição</h4>
</ul>
<ul class="list-group">
<p class="list-group-item list-group-item-action flex-column align-items-start">@receipt.Description</p>
<h4 class="list-group-item list-group-item-action active">Ingredientes</h4>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Quantidade</th>
            <th>Ingrediente</th>
        </tr>
    </thead>
            <tbody>
                @foreach(var ingredient in receipt.Ingredients)
                {
                    <tr>
                        <td>@ingredient.Quantity</td>
                        <td>@ingredient.Ingredient</td>
                    </tr>
                }
            </tbody>
</table>
</ul>

<!--<div class="form-row align-items-center">-->
    <ul class="list-group">
        <h4 class="list-group-item list-group-item-action active">Passos</h4>
        @foreach(var step in receipt.Steps)
        {   
            <li class="list-group-item list-group-item-action"><input class="form-check-input" type="checkbox" value="" id="defaultCheck1"> @step.Step</li>
        }
    </ul>
<!--</div> -->


@code {
    [Parameter]
    public string Id { get; set; }
    private Receipt receipt = new Receipt();
    private List<StepRecipe> steps = new List<StepRecipe>();
    private List<IngredientRecipe> ingredients = new List<IngredientRecipe>();

    protected override async Task OnInitializedAsync()
    {
        receipt = await _receiptRepository.FirstOrDefault(x => x.Id ==Guid.Parse(Id));
    }
}
